/**
 * 猫眼影票抢票脚本 - 高级版
 * @supported Loon 2.1+
 * @version 1.0.0
 */

const $ = API("maoyan-ticket", true); // 初始化 API，启用调试

// 配置管理
const CONFIG_KEY = "maoyan-config";
const DEFAULT_CONFIG = {
    stockOutRegister: { from: 1, to: 0 },
    ticketStatus: { from: 2, to: 3 },
    saleStatus: { from: 4, to: 3 },
    success: { from: false, to: true },
    remainingStock: { from: 0, to: 2297 },
    showStatus: { from: 2, to: 0 }
};

// 初始化配置
if (!$.read(CONFIG_KEY)) {
    $.write(DEFAULT_CONFIG, CONFIG_KEY);
}

class MaoyanModifier {
    constructor() {
        this.config = $.read(CONFIG_KEY) || DEFAULT_CONFIG;
        this.stats = {
            modifiedCount: 0,
            lastModified: null,
            errorCount: 0
        };
    }

    // 处理响应
    processResponse(request) {
        const url = request.url;
        const body = $response.body;
        
        $.log(`🐱 处理请求: ${url}`);
        
        if (!body) {
            $.error("响应体为空");
            return { body: body };
        }

        try {
            let data = this.parseJSON(body);
            if (!data) {
                return { body: body };
            }

            const originalData = JSON.stringify(data);
            const modified = this.applyModifications(url, data);

            if (modified) {
                this.stats.modifiedCount++;
                this.stats.lastModified = new Date().toISOString();
                $.write(this.stats, "maoyan-stats");
                
                $.log("✅ 修改完成");
                return { body: JSON.stringify(data) };
            } else {
                $.log("ℹ️ 无需修改");
                return { body: body };
            }

        } catch (error) {
            this.stats.errorCount++;
            $.write(this.stats, "maoyan-stats");
            $.error(`处理错误: ${error}`);
            return { body: body };
        }
    }

    // 解析 JSON
    parseJSON(str) {
        try {
            return JSON.parse(str);
        } catch (e) {
            $.error(`JSON 解析失败: ${e.message}`);
            return null;
        }
    }

    // 应用修改规则
    applyModifications(url, data) {
        let modified = false;

        // 项目详情接口
        if (url.includes('/my/odea/project/detail')) {
            modified = this.modifyField(data, 'stockOutRegister') || modified;
            modified = this.modifyField(data, 'ticketStatus') || modified;
            modified = this.modifyField(data, 'saleStatus') || modified;
        }
        
        // 库存验证接口
        else if (url.includes('/my/odea/showTickets/validateStock')) {
            modified = this.modifyField(data, 'success') || modified;
            if (data.error !== null && data.error !== undefined) {
                data.error = null;
                modified = true;
                $.log("✅ 修改 error 为 null");
            }
        }
        
        // 场次信息接口
        else if (url.includes('/maoyansh/myshow/ajax/channelPage/floorPerfs')) {
            modified = this.modifyField(data, 'remainingStock') || modified;
            modified = this.modifyField(data, 'showStatus') || modified;
        }

        return modified;
    }

    // 修改字段
    modifyField(data, field) {
        const config = this.config[field];
        if (!config) return false;

        if (data[field] === config.from) {
            data[field] = config.to;
            $.log(`✅ 修改 ${field}: ${config.from} → ${config.to}`);
            return true;
        }
        return false;
    }

    // 获取统计信息
    getStats() {
        return $.read("maoyan-stats") || this.stats;
    }

    // 重置统计
    resetStats() {
        this.stats = {
            modifiedCount: 0,
            lastModified: null,
            errorCount: 0
        };
        $.write(this.stats, "maoyan-stats");
    }
}

// HTTP 服务（可选，用于管理界面）
function createService() {
    const $app = express();
    
    $app.get("/stats", (req, res) => {
        const modifier = new MaoyanModifier();
        const stats = modifier.getStats();
        res.json({
            status: "success",
            data: stats
        });
    });

    $app.post("/reset", (req, res) => {
        const modifier = new MaoyanModifier();
        modifier.resetStats();
        res.json({
            status: "success",
            message: "统计已重置"
        });
    });

    $app.start();
}

// 主处理函数
function main() {
    const modifier = new MaoyanModifier();
    const result = modifier.processResponse($request);
    $.done(result);
}

// 根据请求类型执行不同逻辑
if (typeof $request !== "undefined") {
    // 脚本执行模式
    main();
} else {
    // 服务模式（可选）
    // createService();
}
